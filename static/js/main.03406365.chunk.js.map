{"version":3,"sources":["components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","backgroundColor","value","onChange","event","target","rows","newText","toUpperCase","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultprop","App","setMode","body","background","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.03406365.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/About\">\r\n                About\r\n              </Link>\r\n            </li> */}\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n          <div\r\n            className={`form-check form-switch text-${props.mode === \"light\" ? \"dark\" : \"light\"}`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              onClick={props.toggleMode}\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable Dark Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultprop = {\r\n  title: \"TestUtils\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n\tconst handleUpclick = () => {\r\n\t\t// console.log('Upercase was clicked' + text);\r\n\t\tlet newText = text.toUpperCase();\r\n\t\tsetText(newText);\r\n\t};\r\n\r\n\tconst handleLoclick = () => {\r\n\t\t// console.log('Upercase was clicked' + text);\r\n\t\tlet newText = text.toLowerCase();\r\n\t\tsetText(newText);\r\n\t};\r\n\r\n\tconst handleClearclick = () => {\r\n\t\t// console.log('Upercase was clicked' + text);\r\n\t\tlet newText = \"\";\r\n\t\tsetText(newText);\r\n\t};\r\n\r\n\tconst handleOnChange = (event) => {\r\n\t\t// console.log('On change was clicked');\r\n\t\tsetText(event.target.value);\r\n\t};\r\n\r\n\tconst handleCopy = () => {\r\n\t\tvar text = document.getElementById(\"myBox\");\r\n\t\ttext.select();\r\n\t\tnavigator.clipboard.writeText(text.value);\r\n\t};\r\n\r\n\tconst handleExtraSpace = () => {\r\n\t\tlet newText = text.split(/[ ]+/);\r\n\t\tsetText(newText.join(\" \"));\r\n\t}\r\n\r\n\tconst [text, setText] = useState(\"\");\r\n\t// text = \"newtext here\" wrong way to assign new text\r\n\t// setText(\"newtext here\") correct way to assign new text\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"container\" style={{color : props.mode===\"dark\" ? \"white\" : \"#273340\"}}>\r\n\t\t\t\t<h1>{props.heading}</h1>\r\n\t\t\t\t<div className=\"mb-3\">\r\n\t\t\t\t\t<textarea\r\n\t\t\t\t\t\tclassName=\"form-control\"\r\n            style={{backgroundColor : props.mode===\"dark\" ? \"#273340\" : \"white\", color: props.mode===\"dark\" ? \"white\" : \"#273340\"}}\r\n\t\t\t\t\t\tvalue={text}\r\n\t\t\t\t\t\tonChange={handleOnChange}\r\n\t\t\t\t\t\tid=\"myBox\"\r\n\t\t\t\t\t\trows=\"8\"\r\n\t\t\t\t\t></textarea>\r\n\t\t\t\t\t<button className=\"btn btn-primary m-2\" onClick={handleUpclick}> Convert to uppercase </button>\r\n\t\t\t\t\t<button className=\"btn btn-primary m-2\" onClick={handleLoclick}> Convert to lowercase </button>\r\n\t\t\t\t\t<button className=\"btn btn-success m-2\" onClick={handleCopy}> Copy Text </button>\r\n\t\t\t\t\t<button className=\"btn btn-warning m-2\" onClick={handleExtraSpace}> Remove Extra space </button>\r\n\t\t\t\t\t<button className=\"btn btn-danger m-2\" onClick={handleClearclick}> Clear Text Area </button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"container mx-4\" style={{color : props.mode === \"dark\" ? \"white\" : \"#273340\",}}>\r\n\t\t\t\t<h1>This is your summary</h1>\r\n\t\t\t\t<b> {text.split(\" \").length} word and {text.length} Characters </b>\r\n\t\t\t\t<p> {0.008 * text.split(\" \").length * 60} second to read</p>\r\n\t\t\t\t<h3><hr/> Preveiw </h3>\r\n\t\t\t\t<p>{text.length>0?text:\"Enter something to preview it here\"}</p>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n}\r\n","import \"./App.css\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from 'react'\n// import { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n// import Alert from \"./Alert\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  // const [alert, setAlert] = useState('this is alert');\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.background = '#273340';\n    }\n    else {\n      setMode('light');\n      document.body.style.background = 'white';\n    }\n  }\n\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <TextForm heading=\"Enter the text to analyze below\" mode={mode} />\n      {/* <Alert alert={alert} /> */}\n      {/* <div className=\"container\">\n      <Switch>\n        <Route exact path=\"/About\" >\n          <About/>\n        </Route>\n        <Route exactn path=\"/\" >\n          <TextForm heading=\"Enter the text to analyze below\" mode={mode} />\n        </Route>\n      </Switch>\n      </div>\n      </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}